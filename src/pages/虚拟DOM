1. state 数据
2. JSX 模板
3. 数据 + 模板 结合，生成真实的DOM，来显示
4. state 发生改变
5. 数据 + 模板 结合，生成真实的DOM，替换原始的DOM

缺陷：
第一次生成了一个完整的DOM片段
第二次生成了一个完成的DOM片段
第二次的DOM替换第一次的DOM，非常损耗性能

1. state 数据
2. JSX 模板
3. 数据 + 模板 结合，生成真实的DOM，来显示
4. state 发生改变
5. 数据 + 模板 结合，生成真实的DOM，并不直接替换原始的DOM
6. 新的DOM(DoucumentFragment) 和原始的DOM 作对比，找出差异
7. 找出input框发生了变化
8. 只用新的DOM中的input元素，替换掉老的DOM中的input元素

缺陷：
性能的提升并不明显

1. state 数据
2. JSX 模板
3. 数据 + 模板 生成虚拟DOM(虚拟DOM就是一个JS对象，用它来描述真实DOM) (损耗了性能，但损耗极小)
<div id='abc'><span>hello world</span></div>

4. 用虚拟DOM的结构生成真实的DOM，来显示
[ 'div', { id:'abc' }, [ 'span', {}, 'hello world' ]]

5. state 发生变化

6. 数据 + 模板 生成新的虚拟DOM (极大的提升了性能)
[ 'div', { id:'abc' }, [ 'span', {}, 'bey bey' ]]

7. 比较原始虚拟DOM和新的虚拟DOM的区别，找到区别中的内容 (极大的提升了性能)

8. 直接操作DOM，改变span中的内容

虚拟DOM其实就是一个JS对象，之所以能够提升性能，是因为JS里面去比对JS对象，不怎么消耗性能，但是比较真实DOM的话，就会非常消耗性能

优点：
1. 性能提升了。
2. 它使得跨端应用得以实现。 React Native

两个虚拟DOM比对的方式就称之为Diff(全称:diffrence)算法
同层比对虚拟DOM